<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="317"><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.95%)</title><rect x="0.0000%" y="661" width="0.9464%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.63%)</title><rect x="0.3155%" y="645" width="0.6309%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.5655%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.63%)</title><rect x="0.3155%" y="629" width="0.6309%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.5655%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.32%)</title><rect x="0.6309%" y="613" width="0.3155%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.8809%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="597" width="0.3155%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.8809%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="581" width="0.3155%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.8809%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="565" width="0.3155%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.8809%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="549" width="0.3155%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.8809%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="533" width="0.3155%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.8809%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="517" width="0.3155%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.8809%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="501" width="0.3155%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.8809%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="485" width="0.3155%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.8809%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="469" width="0.3155%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.8809%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.6309%" y="453" width="0.3155%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.8809%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 1.26%)</title><rect x="0.0000%" y="677" width="1.2618%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="661" width="0.3155%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="1.1964%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="645" width="0.3155%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="1.1964%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="629" width="0.3155%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="1.1964%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="613" width="0.3155%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="1.1964%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="597" width="0.3155%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="1.1964%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="581" width="0.3155%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="1.1964%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="565" width="0.3155%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="1"/><text x="1.1964%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="549" width="0.3155%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="1"/><text x="1.1964%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="0.9464%" y="533" width="0.3155%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="1"/><text x="1.1964%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.63%)</title><rect x="3.7855%" y="613" width="0.6309%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="2"/><text x="4.0355%" y="623.50"></text></g><g><title>__rdl_alloc (2 samples, 0.63%)</title><rect x="4.7319%" y="597" width="0.6309%" height="15" fill="rgb(249,31,29)" fg:x="15" fg:w="2"/><text x="4.9819%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.63%)</title><rect x="4.7319%" y="581" width="0.6309%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="2"/><text x="4.9819%" y="591.50"></text></g><g><title>__rust_alloc (1 samples, 0.32%)</title><rect x="5.3628%" y="597" width="0.3155%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="1"/><text x="5.6128%" y="607.50"></text></g><g><title>Minimax::board::Board::get_all_actions (7 samples, 2.21%)</title><rect x="4.4164%" y="613" width="2.2082%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="7"/><text x="4.6664%" y="623.50">M..</text></g><g><title>malloc (3 samples, 0.95%)</title><rect x="5.6782%" y="597" width="0.9464%" height="15" fill="rgb(232,36,49)" fg:x="18" fg:w="3"/><text x="5.9282%" y="607.50"></text></g><g><title>Minimax::board::Piece::get_dirs (1 samples, 0.32%)</title><rect x="6.6246%" y="613" width="0.3155%" height="15" fill="rgb(209,103,24)" fg:x="21" fg:w="1"/><text x="6.8746%" y="623.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::new (8 samples, 2.52%)</title><rect x="6.9401%" y="613" width="2.5237%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="8"/><text x="7.1901%" y="623.50">Mi..</text></g><g><title>Minimax::board::StaticList&lt;T&gt;::push (3 samples, 0.95%)</title><rect x="9.4637%" y="613" width="0.9464%" height="15" fill="rgb(213,181,19)" fg:x="30" fg:w="3"/><text x="9.7137%" y="623.50"></text></g><g><title>Minimax::board::Board::get_actions (30 samples, 9.46%)</title><rect x="3.1546%" y="629" width="9.4637%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="30"/><text x="3.4046%" y="639.50">Minimax::board..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i32,i32)&gt;&gt; (7 samples, 2.21%)</title><rect x="10.4101%" y="613" width="2.2082%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="7"/><text x="10.6601%" y="623.50">c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 2.21%)</title><rect x="10.4101%" y="597" width="2.2082%" height="15" fill="rgb(233,36,39)" fg:x="33" fg:w="7"/><text x="10.6601%" y="607.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i32,i32),alloc::alloc::Global&gt;&gt; (7 samples, 2.21%)</title><rect x="10.4101%" y="581" width="2.2082%" height="15" fill="rgb(226,3,54)" fg:x="33" fg:w="7"/><text x="10.6601%" y="591.50">c..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 2.21%)</title><rect x="10.4101%" y="565" width="2.2082%" height="15" fill="rgb(245,192,40)" fg:x="33" fg:w="7"/><text x="10.6601%" y="575.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i32,i32)&gt;&gt; (7 samples, 2.21%)</title><rect x="10.4101%" y="549" width="2.2082%" height="15" fill="rgb(238,167,29)" fg:x="33" fg:w="7"/><text x="10.6601%" y="559.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 2.21%)</title><rect x="10.4101%" y="533" width="2.2082%" height="15" fill="rgb(232,182,51)" fg:x="33" fg:w="7"/><text x="10.6601%" y="543.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 2.21%)</title><rect x="10.4101%" y="517" width="2.2082%" height="15" fill="rgb(231,60,39)" fg:x="33" fg:w="7"/><text x="10.6601%" y="527.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (7 samples, 2.21%)</title><rect x="10.4101%" y="501" width="2.2082%" height="15" fill="rgb(208,69,12)" fg:x="33" fg:w="7"/><text x="10.6601%" y="511.50">a..</text></g><g><title>cfree (7 samples, 2.21%)</title><rect x="10.4101%" y="485" width="2.2082%" height="15" fill="rgb(235,93,37)" fg:x="33" fg:w="7"/><text x="10.6601%" y="495.50">c..</text></g><g><title>[libc.so.6] (4 samples, 1.26%)</title><rect x="11.3565%" y="469" width="1.2618%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="4"/><text x="11.6065%" y="479.50"></text></g><g><title>Minimax::board::Board::get_all_actions (19 samples, 5.99%)</title><rect x="12.6183%" y="629" width="5.9937%" height="15" fill="rgb(222,207,29)" fg:x="40" fg:w="19"/><text x="12.8683%" y="639.50">Minimax:..</text></g><g><title>[libc.so.6] (16 samples, 5.05%)</title><rect x="13.5647%" y="613" width="5.0473%" height="15" fill="rgb(206,96,30)" fg:x="43" fg:w="16"/><text x="13.8147%" y="623.50">[libc...</text></g><g><title>Minimax::board::StaticList&lt;T&gt;::new (3 samples, 0.95%)</title><rect x="18.6120%" y="629" width="0.9464%" height="15" fill="rgb(218,138,4)" fg:x="59" fg:w="3"/><text x="18.8620%" y="639.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::push (2 samples, 0.63%)</title><rect x="19.5584%" y="629" width="0.6309%" height="15" fill="rgb(250,191,14)" fg:x="62" fg:w="2"/><text x="19.8084%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.32%)</title><rect x="20.1893%" y="629" width="0.3155%" height="15" fill="rgb(239,60,40)" fg:x="64" fg:w="1"/><text x="20.4393%" y="639.50"></text></g><g><title>Minimax::board::Board::execute_action (63 samples, 19.87%)</title><rect x="1.2618%" y="661" width="19.8738%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="63"/><text x="1.5118%" y="671.50">Minimax::board::Board::execute_..</text></g><g><title>Minimax::board::Board::get_all_actions (63 samples, 19.87%)</title><rect x="1.2618%" y="645" width="19.8738%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="63"/><text x="1.5118%" y="655.50">Minimax::board::Board::get_all_..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.63%)</title><rect x="20.5047%" y="629" width="0.6309%" height="15" fill="rgb(250,213,24)" fg:x="65" fg:w="2"/><text x="20.7547%" y="639.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.63%)</title><rect x="20.5047%" y="613" width="0.6309%" height="15" fill="rgb(247,123,22)" fg:x="65" fg:w="2"/><text x="20.7547%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.63%)</title><rect x="20.5047%" y="597" width="0.6309%" height="15" fill="rgb(231,138,38)" fg:x="65" fg:w="2"/><text x="20.7547%" y="607.50"></text></g><g><title>Minimax::board::Board::get_all_actions (1 samples, 0.32%)</title><rect x="21.4511%" y="613" width="0.3155%" height="15" fill="rgb(231,145,46)" fg:x="68" fg:w="1"/><text x="21.7011%" y="623.50"></text></g><g><title>malloc (1 samples, 0.32%)</title><rect x="21.4511%" y="597" width="0.3155%" height="15" fill="rgb(251,118,11)" fg:x="68" fg:w="1"/><text x="21.7011%" y="607.50"></text></g><g><title>Minimax::board::Board::get_actions (4 samples, 1.26%)</title><rect x="21.4511%" y="629" width="1.2618%" height="15" fill="rgb(217,147,25)" fg:x="68" fg:w="4"/><text x="21.7011%" y="639.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::new (3 samples, 0.95%)</title><rect x="21.7666%" y="613" width="0.9464%" height="15" fill="rgb(247,81,37)" fg:x="69" fg:w="3"/><text x="22.0166%" y="623.50"></text></g><g><title>Minimax::montecarlo::NodeState::expand (9 samples, 2.84%)</title><rect x="21.1356%" y="661" width="2.8391%" height="15" fill="rgb(209,12,38)" fg:x="67" fg:w="9"/><text x="21.3856%" y="671.50">Mi..</text></g><g><title>Minimax::board::Board::get_all_actions (9 samples, 2.84%)</title><rect x="21.1356%" y="645" width="2.8391%" height="15" fill="rgb(227,1,9)" fg:x="67" fg:w="9"/><text x="21.3856%" y="655.50">Mi..</text></g><g><title>Minimax::board::Board::get_all_actions (4 samples, 1.26%)</title><rect x="22.7129%" y="629" width="1.2618%" height="15" fill="rgb(248,47,43)" fg:x="72" fg:w="4"/><text x="22.9629%" y="639.50"></text></g><g><title>[libc.so.6] (3 samples, 0.95%)</title><rect x="23.0284%" y="613" width="0.9464%" height="15" fill="rgb(221,10,30)" fg:x="73" fg:w="3"/><text x="23.2784%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.63%)</title><rect x="31.8612%" y="565" width="0.6309%" height="15" fill="rgb(210,229,1)" fg:x="101" fg:w="2"/><text x="32.1112%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.63%)</title><rect x="31.8612%" y="549" width="0.6309%" height="15" fill="rgb(222,148,37)" fg:x="101" fg:w="2"/><text x="32.1112%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.63%)</title><rect x="31.8612%" y="533" width="0.6309%" height="15" fill="rgb(234,67,33)" fg:x="101" fg:w="2"/><text x="32.1112%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.63%)</title><rect x="32.4921%" y="565" width="0.6309%" height="15" fill="rgb(247,98,35)" fg:x="103" fg:w="2"/><text x="32.7421%" y="575.50"></text></g><g><title>__rdl_alloc (3 samples, 0.95%)</title><rect x="34.0694%" y="549" width="0.9464%" height="15" fill="rgb(247,138,52)" fg:x="108" fg:w="3"/><text x="34.3194%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.32%)</title><rect x="34.7003%" y="533" width="0.3155%" height="15" fill="rgb(213,79,30)" fg:x="110" fg:w="1"/><text x="34.9503%" y="543.50"></text></g><g><title>__rust_alloc (4 samples, 1.26%)</title><rect x="35.0158%" y="549" width="1.2618%" height="15" fill="rgb(246,177,23)" fg:x="111" fg:w="4"/><text x="35.2658%" y="559.50"></text></g><g><title>Minimax::board::Board::get_all_actions (14 samples, 4.42%)</title><rect x="33.1230%" y="565" width="4.4164%" height="15" fill="rgb(230,62,27)" fg:x="105" fg:w="14"/><text x="33.3730%" y="575.50">Minim..</text></g><g><title>malloc (4 samples, 1.26%)</title><rect x="36.2776%" y="549" width="1.2618%" height="15" fill="rgb(216,154,8)" fg:x="115" fg:w="4"/><text x="36.5276%" y="559.50"></text></g><g><title>Minimax::board::Board::get_piece (5 samples, 1.58%)</title><rect x="37.5394%" y="565" width="1.5773%" height="15" fill="rgb(244,35,45)" fg:x="119" fg:w="5"/><text x="37.7894%" y="575.50"></text></g><g><title>Minimax::board::Piece::get_dirs (4 samples, 1.26%)</title><rect x="39.1167%" y="565" width="1.2618%" height="15" fill="rgb(251,115,12)" fg:x="124" fg:w="4"/><text x="39.3667%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.32%)</title><rect x="40.0631%" y="549" width="0.3155%" height="15" fill="rgb(240,54,50)" fg:x="127" fg:w="1"/><text x="40.3131%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.32%)</title><rect x="40.0631%" y="533" width="0.3155%" height="15" fill="rgb(233,84,52)" fg:x="127" fg:w="1"/><text x="40.3131%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.32%)</title><rect x="40.0631%" y="517" width="0.3155%" height="15" fill="rgb(207,117,47)" fg:x="127" fg:w="1"/><text x="40.3131%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.32%)</title><rect x="40.0631%" y="501" width="0.3155%" height="15" fill="rgb(249,43,39)" fg:x="127" fg:w="1"/><text x="40.3131%" y="511.50"></text></g><g><title>__rust_alloc (1 samples, 0.32%)</title><rect x="40.0631%" y="485" width="0.3155%" height="15" fill="rgb(209,38,44)" fg:x="127" fg:w="1"/><text x="40.3131%" y="495.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::new (32 samples, 10.09%)</title><rect x="40.3785%" y="565" width="10.0946%" height="15" fill="rgb(236,212,23)" fg:x="128" fg:w="32"/><text x="40.6285%" y="575.50">Minimax::board:..</text></g><g><title>Minimax::board::StaticList&lt;T&gt;::push (10 samples, 3.15%)</title><rect x="50.4732%" y="565" width="3.1546%" height="15" fill="rgb(242,79,21)" fg:x="160" fg:w="10"/><text x="50.7232%" y="575.50">Min..</text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.32%)</title><rect x="53.6278%" y="565" width="0.3155%" height="15" fill="rgb(211,96,35)" fg:x="170" fg:w="1"/><text x="53.8778%" y="575.50"></text></g><g><title>&lt;Minimax::board::Color as core::cmp::PartialEq&gt;::eq (1 samples, 0.32%)</title><rect x="53.6278%" y="549" width="0.3155%" height="15" fill="rgb(253,215,40)" fg:x="170" fg:w="1"/><text x="53.8778%" y="559.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.32%)</title><rect x="53.9432%" y="437" width="0.3155%" height="15" fill="rgb(211,81,21)" fg:x="171" fg:w="1"/><text x="54.1932%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.32%)</title><rect x="53.9432%" y="421" width="0.3155%" height="15" fill="rgb(208,190,38)" fg:x="171" fg:w="1"/><text x="54.1932%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 5.36%)</title><rect x="53.9432%" y="469" width="5.3628%" height="15" fill="rgb(235,213,38)" fg:x="171" fg:w="17"/><text x="54.1932%" y="479.50">&lt;alloc:..</text></g><g><title>alloc::alloc::dealloc (17 samples, 5.36%)</title><rect x="53.9432%" y="453" width="5.3628%" height="15" fill="rgb(237,122,38)" fg:x="171" fg:w="17"/><text x="54.1932%" y="463.50">alloc::..</text></g><g><title>cfree (16 samples, 5.05%)</title><rect x="54.2587%" y="437" width="5.0473%" height="15" fill="rgb(244,218,35)" fg:x="172" fg:w="16"/><text x="54.5087%" y="447.50">cfree</text></g><g><title>[libc.so.6] (13 samples, 4.10%)</title><rect x="55.2050%" y="421" width="4.1009%" height="15" fill="rgb(240,68,47)" fg:x="175" fg:w="13"/><text x="55.4550%" y="431.50">[lib..</text></g><g><title>Minimax::board::Board::get_actions (94 samples, 29.65%)</title><rect x="29.9685%" y="581" width="29.6530%" height="15" fill="rgb(210,16,53)" fg:x="95" fg:w="94"/><text x="30.2185%" y="591.50">Minimax::board::Board::get_actions</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(i32,i32)&gt;&gt; (18 samples, 5.68%)</title><rect x="53.9432%" y="565" width="5.6782%" height="15" fill="rgb(235,124,12)" fg:x="171" fg:w="18"/><text x="54.1932%" y="575.50">core::p..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 5.68%)</title><rect x="53.9432%" y="549" width="5.6782%" height="15" fill="rgb(224,169,11)" fg:x="171" fg:w="18"/><text x="54.1932%" y="559.50">&lt;alloc:..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(i32,i32),alloc::alloc::Global&gt;&gt; (18 samples, 5.68%)</title><rect x="53.9432%" y="533" width="5.6782%" height="15" fill="rgb(250,166,2)" fg:x="171" fg:w="18"/><text x="54.1932%" y="543.50">core::p..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 5.68%)</title><rect x="53.9432%" y="517" width="5.6782%" height="15" fill="rgb(242,216,29)" fg:x="171" fg:w="18"/><text x="54.1932%" y="527.50">&lt;&lt;alloc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(i32,i32)&gt;&gt; (18 samples, 5.68%)</title><rect x="53.9432%" y="501" width="5.6782%" height="15" fill="rgb(230,116,27)" fg:x="171" fg:w="18"/><text x="54.1932%" y="511.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 5.68%)</title><rect x="53.9432%" y="485" width="5.6782%" height="15" fill="rgb(228,99,48)" fg:x="171" fg:w="18"/><text x="54.1932%" y="495.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.32%)</title><rect x="59.3060%" y="469" width="0.3155%" height="15" fill="rgb(253,11,6)" fg:x="188" fg:w="1"/><text x="59.5560%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.32%)</title><rect x="59.3060%" y="453" width="0.3155%" height="15" fill="rgb(247,143,39)" fg:x="188" fg:w="1"/><text x="59.5560%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.32%)</title><rect x="59.3060%" y="437" width="0.3155%" height="15" fill="rgb(236,97,10)" fg:x="188" fg:w="1"/><text x="59.5560%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.32%)</title><rect x="59.3060%" y="421" width="0.3155%" height="15" fill="rgb(233,208,19)" fg:x="188" fg:w="1"/><text x="59.5560%" y="431.50"></text></g><g><title>Minimax::board::Board::get_all_actions (62 samples, 19.56%)</title><rect x="59.6215%" y="581" width="19.5584%" height="15" fill="rgb(216,164,2)" fg:x="189" fg:w="62"/><text x="59.8715%" y="591.50">Minimax::board::Board::get_all_..</text></g><g><title>[libc.so.6] (45 samples, 14.20%)</title><rect x="64.9842%" y="565" width="14.1956%" height="15" fill="rgb(220,129,5)" fg:x="206" fg:w="45"/><text x="65.2342%" y="575.50">[libc.so.6]</text></g><g><title>Minimax::board::Board::get_piece (2 samples, 0.63%)</title><rect x="79.1798%" y="581" width="0.6309%" height="15" fill="rgb(242,17,10)" fg:x="251" fg:w="2"/><text x="79.4298%" y="591.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::get (2 samples, 0.63%)</title><rect x="79.8107%" y="581" width="0.6309%" height="15" fill="rgb(242,107,0)" fg:x="253" fg:w="2"/><text x="80.0607%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.63%)</title><rect x="79.8107%" y="565" width="0.6309%" height="15" fill="rgb(251,28,31)" fg:x="253" fg:w="2"/><text x="80.0607%" y="575.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::new (3 samples, 0.95%)</title><rect x="80.4416%" y="581" width="0.9464%" height="15" fill="rgb(233,223,10)" fg:x="255" fg:w="3"/><text x="80.6916%" y="591.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::push (8 samples, 2.52%)</title><rect x="81.3880%" y="581" width="2.5237%" height="15" fill="rgb(215,21,27)" fg:x="258" fg:w="8"/><text x="81.6380%" y="591.50">Mi..</text></g><g><title>[libc.so.6] (4 samples, 1.26%)</title><rect x="83.9117%" y="581" width="1.2618%" height="15" fill="rgb(232,23,21)" fg:x="266" fg:w="4"/><text x="84.1617%" y="591.50"></text></g><g><title>Minimax::montecarlo::Tree::get_monte_carlo_move (210 samples, 66.25%)</title><rect x="23.9748%" y="661" width="66.2461%" height="15" fill="rgb(244,5,23)" fg:x="76" fg:w="210"/><text x="24.2248%" y="671.50">Minimax::montecarlo::Tree::get_monte_carlo_move</text></g><g><title>Minimax::montecarlo::Tree::expand_tree (210 samples, 66.25%)</title><rect x="23.9748%" y="645" width="66.2461%" height="15" fill="rgb(226,81,46)" fg:x="76" fg:w="210"/><text x="24.2248%" y="655.50">Minimax::montecarlo::Tree::expand_tree</text></g><g><title>Minimax::montecarlo::NodeState::play_out (210 samples, 66.25%)</title><rect x="23.9748%" y="629" width="66.2461%" height="15" fill="rgb(247,70,30)" fg:x="76" fg:w="210"/><text x="24.2248%" y="639.50">Minimax::montecarlo::NodeState::play_out</text></g><g><title>Minimax::board::Board::make_random_move (210 samples, 66.25%)</title><rect x="23.9748%" y="613" width="66.2461%" height="15" fill="rgb(212,68,19)" fg:x="76" fg:w="210"/><text x="24.2248%" y="623.50">Minimax::board::Board::make_random_move</text></g><g><title>Minimax::board::Board::get_all_actions (210 samples, 66.25%)</title><rect x="23.9748%" y="597" width="66.2461%" height="15" fill="rgb(240,187,13)" fg:x="76" fg:w="210"/><text x="24.2248%" y="607.50">Minimax::board::Board::get_all_actions</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 5.05%)</title><rect x="85.1735%" y="581" width="5.0473%" height="15" fill="rgb(223,113,26)" fg:x="270" fg:w="16"/><text x="85.4235%" y="591.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 5.05%)</title><rect x="85.1735%" y="565" width="5.0473%" height="15" fill="rgb(206,192,2)" fg:x="270" fg:w="16"/><text x="85.4235%" y="575.50">&lt;core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (15 samples, 4.73%)</title><rect x="85.4890%" y="549" width="4.7319%" height="15" fill="rgb(241,108,4)" fg:x="271" fg:w="15"/><text x="85.7390%" y="559.50">core::..</text></g><g><title>[unknown] (285 samples, 89.91%)</title><rect x="1.2618%" y="677" width="89.9054%" height="15" fill="rgb(247,173,49)" fg:x="4" fg:w="285"/><text x="1.5118%" y="687.50">[unknown]</text></g><g><title>[unknown] (3 samples, 0.95%)</title><rect x="90.2208%" y="661" width="0.9464%" height="15" fill="rgb(224,114,35)" fg:x="286" fg:w="3"/><text x="90.4708%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.95%)</title><rect x="90.2208%" y="645" width="0.9464%" height="15" fill="rgb(245,159,27)" fg:x="286" fg:w="3"/><text x="90.4708%" y="655.50"></text></g><g><title>[unknown] (3 samples, 0.95%)</title><rect x="90.2208%" y="629" width="0.9464%" height="15" fill="rgb(245,172,44)" fg:x="286" fg:w="3"/><text x="90.4708%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.95%)</title><rect x="90.2208%" y="613" width="0.9464%" height="15" fill="rgb(236,23,11)" fg:x="286" fg:w="3"/><text x="90.4708%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.95%)</title><rect x="90.2208%" y="597" width="0.9464%" height="15" fill="rgb(205,117,38)" fg:x="286" fg:w="3"/><text x="90.4708%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.63%)</title><rect x="90.5363%" y="581" width="0.6309%" height="15" fill="rgb(237,72,25)" fg:x="287" fg:w="2"/><text x="90.7863%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.63%)</title><rect x="90.5363%" y="565" width="0.6309%" height="15" fill="rgb(244,70,9)" fg:x="287" fg:w="2"/><text x="90.7863%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.63%)</title><rect x="90.5363%" y="549" width="0.6309%" height="15" fill="rgb(217,125,39)" fg:x="287" fg:w="2"/><text x="90.7863%" y="559.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::new (1 samples, 0.32%)</title><rect x="91.1672%" y="373" width="0.3155%" height="15" fill="rgb(235,36,10)" fg:x="289" fg:w="1"/><text x="91.4172%" y="383.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::new_node (2 samples, 0.63%)</title><rect x="91.4826%" y="357" width="0.6309%" height="15" fill="rgb(251,123,47)" fg:x="290" fg:w="2"/><text x="91.7326%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.63%)</title><rect x="91.4826%" y="341" width="0.6309%" height="15" fill="rgb(221,13,13)" fg:x="290" fg:w="2"/><text x="91.7326%" y="351.50"></text></g><g><title>core::ptr::write (2 samples, 0.63%)</title><rect x="91.4826%" y="325" width="0.6309%" height="15" fill="rgb(238,131,9)" fg:x="290" fg:w="2"/><text x="91.7326%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.32%)</title><rect x="91.7981%" y="309" width="0.3155%" height="15" fill="rgb(211,50,8)" fg:x="291" fg:w="1"/><text x="92.0481%" y="319.50"></text></g><g><title>indextree::id::NodeId::append (1 samples, 0.32%)</title><rect x="92.1136%" y="357" width="0.3155%" height="15" fill="rgb(245,182,24)" fg:x="292" fg:w="1"/><text x="92.3636%" y="367.50"></text></g><g><title>indextree::id::NodeId::checked_append (1 samples, 0.32%)</title><rect x="92.1136%" y="341" width="0.3155%" height="15" fill="rgb(242,14,37)" fg:x="292" fg:w="1"/><text x="92.3636%" y="351.50"></text></g><g><title>indextree::relations::insert_with_neighbors (1 samples, 0.32%)</title><rect x="92.1136%" y="325" width="0.3155%" height="15" fill="rgb(246,228,12)" fg:x="292" fg:w="1"/><text x="92.3636%" y="335.50"></text></g><g><title>indextree::siblings_range::SiblingsRange::detach_from_siblings (1 samples, 0.32%)</title><rect x="92.1136%" y="309" width="0.3155%" height="15" fill="rgb(213,55,15)" fg:x="292" fg:w="1"/><text x="92.3636%" y="319.50"></text></g><g><title>indextree::relations::connect_neighbors (1 samples, 0.32%)</title><rect x="92.1136%" y="293" width="0.3155%" height="15" fill="rgb(209,9,3)" fg:x="292" fg:w="1"/><text x="92.3636%" y="303.50"></text></g><g><title>Minimax::montecarlo::NodeState::expand (4 samples, 1.26%)</title><rect x="91.4826%" y="373" width="1.2618%" height="15" fill="rgb(230,59,30)" fg:x="290" fg:w="4"/><text x="91.7326%" y="383.50"></text></g><g><title>indextree::node::Node&lt;T&gt;::get (1 samples, 0.32%)</title><rect x="92.4290%" y="357" width="0.3155%" height="15" fill="rgb(209,121,21)" fg:x="293" fg:w="1"/><text x="92.6790%" y="367.50"></text></g><g><title>Minimax::board::Board::execute_action (3 samples, 0.95%)</title><rect x="93.3754%" y="341" width="0.9464%" height="15" fill="rgb(220,109,13)" fg:x="296" fg:w="3"/><text x="93.6254%" y="351.50"></text></g><g><title>Minimax::board::Board::get_piece (2 samples, 0.63%)</title><rect x="93.6909%" y="325" width="0.6309%" height="15" fill="rgb(232,18,1)" fg:x="297" fg:w="2"/><text x="93.9409%" y="335.50"></text></g><g><title>Minimax::board::StaticList&lt;T&gt;::get (2 samples, 0.63%)</title><rect x="94.3218%" y="341" width="0.6309%" height="15" fill="rgb(215,41,42)" fg:x="299" fg:w="2"/><text x="94.5718%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.63%)</title><rect x="94.3218%" y="325" width="0.6309%" height="15" fill="rgb(224,123,36)" fg:x="299" fg:w="2"/><text x="94.5718%" y="335.50"></text></g><g><title>Minimax::montecarlo::NodeState::play_out (9 samples, 2.84%)</title><rect x="92.7445%" y="373" width="2.8391%" height="15" fill="rgb(240,125,3)" fg:x="294" fg:w="9"/><text x="92.9945%" y="383.50">Mi..</text></g><g><title>Minimax::board::Board::make_random_move (9 samples, 2.84%)</title><rect x="92.7445%" y="357" width="2.8391%" height="15" fill="rgb(205,98,50)" fg:x="294" fg:w="9"/><text x="92.9945%" y="367.50">Mi..</text></g><g><title>rand::rng::Rng::gen_range (2 samples, 0.63%)</title><rect x="94.9527%" y="341" width="0.6309%" height="15" fill="rgb(205,185,37)" fg:x="301" fg:w="2"/><text x="95.2027%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (2 samples, 0.63%)</title><rect x="94.9527%" y="325" width="0.6309%" height="15" fill="rgb(238,207,15)" fg:x="301" fg:w="2"/><text x="95.2027%" y="335.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (2 samples, 0.63%)</title><rect x="94.9527%" y="309" width="0.6309%" height="15" fill="rgb(213,199,42)" fg:x="301" fg:w="2"/><text x="95.2027%" y="319.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (2 samples, 0.63%)</title><rect x="94.9527%" y="293" width="0.6309%" height="15" fill="rgb(235,201,11)" fg:x="301" fg:w="2"/><text x="95.2027%" y="303.50"></text></g><g><title>rand::rng::Rng::gen (1 samples, 0.32%)</title><rect x="95.2681%" y="277" width="0.3155%" height="15" fill="rgb(207,46,11)" fg:x="302" fg:w="1"/><text x="95.5181%" y="287.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (1 samples, 0.32%)</title><rect x="95.2681%" y="261" width="0.3155%" height="15" fill="rgb(241,35,35)" fg:x="302" fg:w="1"/><text x="95.5181%" y="271.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (1 samples, 0.32%)</title><rect x="95.2681%" y="245" width="0.3155%" height="15" fill="rgb(243,32,47)" fg:x="302" fg:w="1"/><text x="95.5181%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (1 samples, 0.32%)</title><rect x="95.2681%" y="229" width="0.3155%" height="15" fill="rgb(247,202,23)" fg:x="302" fg:w="1"/><text x="95.5181%" y="239.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (1 samples, 0.32%)</title><rect x="95.2681%" y="213" width="0.3155%" height="15" fill="rgb(219,102,11)" fg:x="302" fg:w="1"/><text x="95.5181%" y="223.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.32%)</title><rect x="95.2681%" y="197" width="0.3155%" height="15" fill="rgb(243,110,44)" fg:x="302" fg:w="1"/><text x="95.5181%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.32%)</title><rect x="95.2681%" y="181" width="0.3155%" height="15" fill="rgb(222,74,54)" fg:x="302" fg:w="1"/><text x="95.5181%" y="191.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.32%)</title><rect x="95.2681%" y="165" width="0.3155%" height="15" fill="rgb(216,99,12)" fg:x="302" fg:w="1"/><text x="95.5181%" y="175.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.32%)</title><rect x="95.2681%" y="149" width="0.3155%" height="15" fill="rgb(226,22,26)" fg:x="302" fg:w="1"/><text x="95.5181%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.32%)</title><rect x="95.2681%" y="133" width="0.3155%" height="15" fill="rgb(217,163,10)" fg:x="302" fg:w="1"/><text x="95.5181%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.32%)</title><rect x="95.2681%" y="117" width="0.3155%" height="15" fill="rgb(213,25,53)" fg:x="302" fg:w="1"/><text x="95.5181%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.32%)</title><rect x="95.2681%" y="101" width="0.3155%" height="15" fill="rgb(252,105,26)" fg:x="302" fg:w="1"/><text x="95.5181%" y="111.50"></text></g><g><title>rand_chacha::guts::round (1 samples, 0.32%)</title><rect x="95.2681%" y="85" width="0.3155%" height="15" fill="rgb(220,39,43)" fg:x="302" fg:w="1"/><text x="95.5181%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (1 samples, 0.32%)</title><rect x="95.2681%" y="69" width="0.3155%" height="15" fill="rgb(229,68,48)" fg:x="302" fg:w="1"/><text x="95.5181%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (1 samples, 0.32%)</title><rect x="95.2681%" y="53" width="0.3155%" height="15" fill="rgb(252,8,32)" fg:x="302" fg:w="1"/><text x="95.5181%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (1 samples, 0.32%)</title><rect x="95.2681%" y="37" width="0.3155%" height="15" fill="rgb(223,20,43)" fg:x="302" fg:w="1"/><text x="95.5181%" y="47.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.32%)</title><rect x="97.4763%" y="213" width="0.3155%" height="15" fill="rgb(229,81,49)" fg:x="309" fg:w="1"/><text x="97.7263%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.32%)</title><rect x="97.4763%" y="197" width="0.3155%" height="15" fill="rgb(236,28,36)" fg:x="309" fg:w="1"/><text x="97.7263%" y="207.50"></text></g><g><title>indextree::arena::Arena&lt;T&gt;::get (2 samples, 0.63%)</title><rect x="97.4763%" y="229" width="0.6309%" height="15" fill="rgb(249,185,26)" fg:x="309" fg:w="2"/><text x="97.7263%" y="239.50"></text></g><g><title>indextree::id::NodeId::index0 (1 samples, 0.32%)</title><rect x="97.7918%" y="213" width="0.3155%" height="15" fill="rgb(249,174,33)" fg:x="310" fg:w="1"/><text x="98.0418%" y="223.50"></text></g><g><title>indextree::node::Node&lt;T&gt;::get (2 samples, 0.63%)</title><rect x="98.1073%" y="229" width="0.6309%" height="15" fill="rgb(233,201,37)" fg:x="311" fg:w="2"/><text x="98.3573%" y="239.50"></text></g><g><title>Minimax::montecarlo::NodeState::uct_value (10 samples, 3.15%)</title><rect x="96.2145%" y="245" width="3.1546%" height="15" fill="rgb(221,78,26)" fg:x="305" fg:w="10"/><text x="96.4645%" y="255.50">Min..</text></g><g><title>std::f32::&lt;impl f32&gt;::log2 (2 samples, 0.63%)</title><rect x="98.7382%" y="229" width="0.6309%" height="15" fill="rgb(250,127,30)" fg:x="313" fg:w="2"/><text x="98.9882%" y="239.50"></text></g><g><title>[libm.so.6] (2 samples, 0.63%)</title><rect x="98.7382%" y="213" width="0.6309%" height="15" fill="rgb(230,49,44)" fg:x="313" fg:w="2"/><text x="98.9882%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::partial_cmp (1 samples, 0.32%)</title><rect x="99.3691%" y="245" width="0.3155%" height="15" fill="rgb(229,67,23)" fg:x="315" fg:w="1"/><text x="99.6191%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.32%)</title><rect x="99.3691%" y="229" width="0.3155%" height="15" fill="rgb(249,83,47)" fg:x="315" fg:w="1"/><text x="99.6191%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::ge (1 samples, 0.32%)</title><rect x="99.3691%" y="213" width="0.3155%" height="15" fill="rgb(215,43,3)" fg:x="315" fg:w="1"/><text x="99.6191%" y="223.50"></text></g><g><title>all (317 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="317"/><text x="0.2500%" y="719.50"></text></g><g><title>Minimax (317 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="317"/><text x="0.2500%" y="703.50">Minimax</text></g><g><title>_start (28 samples, 8.83%)</title><rect x="91.1672%" y="677" width="8.8328%" height="15" fill="rgb(233,0,4)" fg:x="289" fg:w="28"/><text x="91.4172%" y="687.50">_start</text></g><g><title>__libc_start_main (28 samples, 8.83%)</title><rect x="91.1672%" y="661" width="8.8328%" height="15" fill="rgb(235,30,7)" fg:x="289" fg:w="28"/><text x="91.4172%" y="671.50">__libc_start..</text></g><g><title>[libc.so.6] (28 samples, 8.83%)</title><rect x="91.1672%" y="645" width="8.8328%" height="15" fill="rgb(250,79,13)" fg:x="289" fg:w="28"/><text x="91.4172%" y="655.50">[libc.so.6]</text></g><g><title>main (28 samples, 8.83%)</title><rect x="91.1672%" y="629" width="8.8328%" height="15" fill="rgb(211,146,34)" fg:x="289" fg:w="28"/><text x="91.4172%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (28 samples, 8.83%)</title><rect x="91.1672%" y="613" width="8.8328%" height="15" fill="rgb(228,22,38)" fg:x="289" fg:w="28"/><text x="91.4172%" y="623.50">std::rt::lan..</text></g><g><title>std::panic::catch_unwind (28 samples, 8.83%)</title><rect x="91.1672%" y="597" width="8.8328%" height="15" fill="rgb(235,168,5)" fg:x="289" fg:w="28"/><text x="91.4172%" y="607.50">std::panic::..</text></g><g><title>std::panicking::try (28 samples, 8.83%)</title><rect x="91.1672%" y="581" width="8.8328%" height="15" fill="rgb(221,155,16)" fg:x="289" fg:w="28"/><text x="91.4172%" y="591.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (28 samples, 8.83%)</title><rect x="91.1672%" y="565" width="8.8328%" height="15" fill="rgb(215,215,53)" fg:x="289" fg:w="28"/><text x="91.4172%" y="575.50">std::panicki..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (28 samples, 8.83%)</title><rect x="91.1672%" y="549" width="8.8328%" height="15" fill="rgb(223,4,10)" fg:x="289" fg:w="28"/><text x="91.4172%" y="559.50">std::rt::lan..</text></g><g><title>std::panic::catch_unwind (28 samples, 8.83%)</title><rect x="91.1672%" y="533" width="8.8328%" height="15" fill="rgb(234,103,6)" fg:x="289" fg:w="28"/><text x="91.4172%" y="543.50">std::panic::..</text></g><g><title>std::panicking::try (28 samples, 8.83%)</title><rect x="91.1672%" y="517" width="8.8328%" height="15" fill="rgb(227,97,0)" fg:x="289" fg:w="28"/><text x="91.4172%" y="527.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (28 samples, 8.83%)</title><rect x="91.1672%" y="501" width="8.8328%" height="15" fill="rgb(234,150,53)" fg:x="289" fg:w="28"/><text x="91.4172%" y="511.50">std::panicki..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (28 samples, 8.83%)</title><rect x="91.1672%" y="485" width="8.8328%" height="15" fill="rgb(228,201,54)" fg:x="289" fg:w="28"/><text x="91.4172%" y="495.50">core::ops::f..</text></g><g><title>std::rt::lang_start::{{closure}} (28 samples, 8.83%)</title><rect x="91.1672%" y="469" width="8.8328%" height="15" fill="rgb(222,22,37)" fg:x="289" fg:w="28"/><text x="91.4172%" y="479.50">std::rt::lan..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 8.83%)</title><rect x="91.1672%" y="453" width="8.8328%" height="15" fill="rgb(237,53,32)" fg:x="289" fg:w="28"/><text x="91.4172%" y="463.50">std::sys_com..</text></g><g><title>core::ops::function::FnOnce::call_once (28 samples, 8.83%)</title><rect x="91.1672%" y="437" width="8.8328%" height="15" fill="rgb(233,25,53)" fg:x="289" fg:w="28"/><text x="91.4172%" y="447.50">core::ops::f..</text></g><g><title>Minimax::main (28 samples, 8.83%)</title><rect x="91.1672%" y="421" width="8.8328%" height="15" fill="rgb(210,40,34)" fg:x="289" fg:w="28"/><text x="91.4172%" y="431.50">Minimax::main</text></g><g><title>Minimax::montecarlo::Tree::get_monte_carlo_move (28 samples, 8.83%)</title><rect x="91.1672%" y="405" width="8.8328%" height="15" fill="rgb(241,220,44)" fg:x="289" fg:w="28"/><text x="91.4172%" y="415.50">Minimax::mon..</text></g><g><title>Minimax::montecarlo::Tree::expand_tree (28 samples, 8.83%)</title><rect x="91.1672%" y="389" width="8.8328%" height="15" fill="rgb(235,28,35)" fg:x="289" fg:w="28"/><text x="91.4172%" y="399.50">Minimax::mon..</text></g><g><title>Minimax::montecarlo::NodeState::select_node (14 samples, 4.42%)</title><rect x="95.5836%" y="373" width="4.4164%" height="15" fill="rgb(210,56,17)" fg:x="303" fg:w="14"/><text x="95.8336%" y="383.50">Minim..</text></g><g><title>core::iter::traits::iterator::Iterator::max_by (12 samples, 3.79%)</title><rect x="96.2145%" y="357" width="3.7855%" height="15" fill="rgb(224,130,29)" fg:x="305" fg:w="12"/><text x="96.4645%" y="367.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::reduce (12 samples, 3.79%)</title><rect x="96.2145%" y="341" width="3.7855%" height="15" fill="rgb(235,212,8)" fg:x="305" fg:w="12"/><text x="96.4645%" y="351.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 3.79%)</title><rect x="96.2145%" y="325" width="3.7855%" height="15" fill="rgb(223,33,50)" fg:x="305" fg:w="12"/><text x="96.4645%" y="335.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::{{closure}} (12 samples, 3.79%)</title><rect x="96.2145%" y="309" width="3.7855%" height="15" fill="rgb(219,149,13)" fg:x="305" fg:w="12"/><text x="96.4645%" y="319.50">core..</text></g><g><title>core::cmp::max_by (12 samples, 3.79%)</title><rect x="96.2145%" y="293" width="3.7855%" height="15" fill="rgb(250,156,29)" fg:x="305" fg:w="12"/><text x="96.4645%" y="303.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12 samples, 3.79%)</title><rect x="96.2145%" y="277" width="3.7855%" height="15" fill="rgb(216,193,19)" fg:x="305" fg:w="12"/><text x="96.4645%" y="287.50">core..</text></g><g><title>Minimax::montecarlo::NodeState::select_node::{{closure}} (12 samples, 3.79%)</title><rect x="96.2145%" y="261" width="3.7855%" height="15" fill="rgb(216,135,14)" fg:x="305" fg:w="12"/><text x="96.4645%" y="271.50">Mini..</text></g><g><title>indextree::node::Node&lt;T&gt;::get (1 samples, 0.32%)</title><rect x="99.6845%" y="245" width="0.3155%" height="15" fill="rgb(241,47,5)" fg:x="316" fg:w="1"/><text x="99.9345%" y="255.50"></text></g></svg></svg>